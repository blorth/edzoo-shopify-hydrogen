{
  "version": 3,
  "sources": ["../../../../app/components/Search.tsx", "../../../../app/lib/search.ts"],
  "sourcesContent": ["import {\n  Link,\n  Form,\n  useParams,\n  useFetcher,\n  type FormProps,\n} from '@remix-run/react';\nimport {Image, Money, Pagination} from '@shopify/hydrogen';\nimport React, {useRef, useEffect} from 'react';\nimport {applyTrackingParams} from '~/lib/search';\n\nimport type {\n  PredictiveProductFragment,\n  PredictiveCollectionFragment,\n  PredictiveArticleFragment,\n  SearchQuery,\n} from 'storefrontapi.generated';\n\ntype PredicticeSearchResultItemImage =\n  | PredictiveCollectionFragment['image']\n  | PredictiveArticleFragment['image']\n  | PredictiveProductFragment['variants']['nodes'][0]['image'];\n\ntype PredictiveSearchResultItemPrice =\n  | PredictiveProductFragment['variants']['nodes'][0]['price'];\n\nexport type NormalizedPredictiveSearchResultItem = {\n  __typename: string | undefined;\n  handle: string;\n  id: string;\n  image?: PredicticeSearchResultItemImage;\n  price?: PredictiveSearchResultItemPrice;\n  styledTitle?: string;\n  title: string;\n  url: string;\n};\n\nexport type NormalizedPredictiveSearchResults = Array<\n  | {type: 'queries'; items: Array<NormalizedPredictiveSearchResultItem>}\n  | {type: 'products'; items: Array<NormalizedPredictiveSearchResultItem>}\n  | {type: 'collections'; items: Array<NormalizedPredictiveSearchResultItem>}\n  | {type: 'pages'; items: Array<NormalizedPredictiveSearchResultItem>}\n  | {type: 'articles'; items: Array<NormalizedPredictiveSearchResultItem>}\n>;\n\nexport type NormalizedPredictiveSearch = {\n  results: NormalizedPredictiveSearchResults;\n  totalResults: number;\n};\n\ntype FetchSearchResultsReturn = {\n  searchResults: {\n    results: SearchQuery | null;\n    totalResults: number;\n  };\n  searchTerm: string;\n};\n\nexport const NO_PREDICTIVE_SEARCH_RESULTS: NormalizedPredictiveSearchResults = [\n  {type: 'queries', items: []},\n  {type: 'products', items: []},\n  {type: 'collections', items: []},\n  {type: 'pages', items: []},\n  {type: 'articles', items: []},\n];\n\nexport function SearchForm({searchTerm}: {searchTerm: string}) {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  // focus the input when cmd+k is pressed\n  useEffect(() => {\n    function handleKeyDown(event: KeyboardEvent) {\n      if (event.key === 'k' && event.metaKey) {\n        event.preventDefault();\n        inputRef.current?.focus();\n      }\n\n      if (event.key === 'Escape') {\n        inputRef.current?.blur();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  return (\n    <Form method=\"get\">\n      <input\n        defaultValue={searchTerm}\n        name=\"q\"\n        placeholder=\"Search\u2026\"\n        ref={inputRef}\n        type=\"search\"\n      />\n      &nbsp;\n      <button type=\"submit\">Search</button>\n    </Form>\n  );\n}\n\nexport function SearchResults({\n  results,\n  searchTerm,\n}: Pick<FetchSearchResultsReturn['searchResults'], 'results'> & {\n  searchTerm: string;\n}) {\n  if (!results) {\n    return null;\n  }\n  const keys = Object.keys(results) as Array<keyof typeof results>;\n  return (\n    <div>\n      {results &&\n        keys.map((type) => {\n          const resourceResults = results[type];\n\n          if (resourceResults.nodes[0]?.__typename === 'Page') {\n            const pageResults = resourceResults as SearchQuery['pages'];\n            return resourceResults.nodes.length ? (\n              <SearchResultPageGrid key=\"pages\" pages={pageResults} />\n            ) : null;\n          }\n\n          if (resourceResults.nodes[0]?.__typename === 'Product') {\n            const productResults = resourceResults as SearchQuery['products'];\n            return resourceResults.nodes.length ? (\n              <SearchResultsProductsGrid\n                key=\"products\"\n                products={productResults}\n                searchTerm={searchTerm}\n              />\n            ) : null;\n          }\n\n          if (resourceResults.nodes[0]?.__typename === 'Article') {\n            const articleResults = resourceResults as SearchQuery['articles'];\n            return resourceResults.nodes.length ? (\n              <SearchResultArticleGrid\n                key=\"articles\"\n                articles={articleResults}\n              />\n            ) : null;\n          }\n\n          return null;\n        })}\n    </div>\n  );\n}\n\nfunction SearchResultsProductsGrid({\n  products,\n  searchTerm,\n}: Pick<SearchQuery, 'products'> & {searchTerm: string}) {\n  return (\n    <div className=\"search-result\">\n      <h2>Products</h2>\n      <Pagination connection={products}>\n        {({nodes, isLoading, NextLink, PreviousLink}) => {\n          const ItemsMarkup = nodes.map((product) => {\n            const trackingParams = applyTrackingParams(\n              product,\n              `q=${encodeURIComponent(searchTerm)}`,\n            );\n\n            return (\n              <div className=\"search-results-item\" key={product.id}>\n                <Link\n                  prefetch=\"intent\"\n                  to={`/products/${product.handle}${trackingParams}`}\n                >\n                  {product.variants.nodes[0].image && (\n                    <Image\n                      data={product.variants.nodes[0].image}\n                      alt={product.title}\n                      width={50}\n                    />\n                  )}\n                  <div>\n                    <p>{product.title}</p>\n                    <small>\n                      <Money data={product.variants.nodes[0].price} />\n                    </small>\n                  </div>\n                </Link>\n              </div>\n            );\n          });\n          return (\n            <div>\n              <div>\n                <PreviousLink>\n                  {isLoading ? 'Loading...' : <span>\u2191 Load previous</span>}\n                </PreviousLink>\n              </div>\n              <div>\n                {ItemsMarkup}\n                <br />\n              </div>\n              <div>\n                <NextLink>\n                  {isLoading ? 'Loading...' : <span>Load more \u2193</span>}\n                </NextLink>\n              </div>\n            </div>\n          );\n        }}\n      </Pagination>\n      <br />\n    </div>\n  );\n}\n\nfunction SearchResultPageGrid({pages}: Pick<SearchQuery, 'pages'>) {\n  return (\n    <div className=\"search-result\">\n      <h2>Pages</h2>\n      <div>\n        {pages?.nodes?.map((page) => (\n          <div className=\"search-results-item\" key={page.id}>\n            <Link prefetch=\"intent\" to={`/pages/${page.handle}`}>\n              {page.title}\n            </Link>\n          </div>\n        ))}\n      </div>\n      <br />\n    </div>\n  );\n}\n\nfunction SearchResultArticleGrid({articles}: Pick<SearchQuery, 'articles'>) {\n  return (\n    <div className=\"search-result\">\n      <h2>Articles</h2>\n      <div>\n        {articles?.nodes?.map((article) => (\n          <div className=\"search-results-item\" key={article.id}>\n            <Link prefetch=\"intent\" to={`/blogs/${article.handle}`}>\n              {article.title}\n            </Link>\n          </div>\n        ))}\n      </div>\n      <br />\n    </div>\n  );\n}\n\nexport function NoSearchResults() {\n  return <p>No results, try a different search.</p>;\n}\n\ntype ChildrenRenderProps = {\n  fetchResults: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  fetcher: ReturnType<typeof useFetcher<NormalizedPredictiveSearchResults>>;\n  inputRef: React.MutableRefObject<HTMLInputElement | null>;\n};\n\ntype SearchFromProps = {\n  action?: FormProps['action'];\n  className?: string;\n  children: (passedProps: ChildrenRenderProps) => React.ReactNode;\n  [key: string]: unknown;\n};\n\n/**\n *  Search form component that sends search requests to the `/search` route\n **/\nexport function PredictiveSearchForm({\n  action,\n  children,\n  className = 'predictive-search-form',\n  ...props\n}: SearchFromProps) {\n  const params = useParams();\n  const fetcher = useFetcher<NormalizedPredictiveSearchResults>({\n    key: 'search',\n  });\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  function fetchResults(event: React.ChangeEvent<HTMLInputElement>) {\n    const searchAction = action ?? '/api/predictive-search';\n    const newSearchTerm = event.target.value || '';\n    const localizedAction = params.locale\n      ? `/${params.locale}${searchAction}`\n      : searchAction;\n\n    fetcher.submit(\n      {q: newSearchTerm, limit: '6'},\n      {method: 'GET', action: localizedAction},\n    );\n  }\n\n  // ensure the passed input has a type of search, because SearchResults\n  // will select the element based on the input\n  useEffect(() => {\n    inputRef?.current?.setAttribute('type', 'search');\n  }, []);\n\n  return (\n    <fetcher.Form\n      {...props}\n      className={className}\n      onSubmit={(event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        if (!inputRef?.current || inputRef.current.value === '') {\n          return;\n        }\n        inputRef.current.blur();\n      }}\n    >\n      {children({fetchResults, inputRef, fetcher})}\n    </fetcher.Form>\n  );\n}\n\nexport function PredictiveSearchResults() {\n  const {results, totalResults, searchInputRef, searchTerm, state} =\n    usePredictiveSearch();\n\n  function goToSearchResult(event: React.MouseEvent<HTMLAnchorElement>) {\n    if (!searchInputRef.current) return;\n    searchInputRef.current.blur();\n    searchInputRef.current.value = '';\n    // close the aside\n    window.location.href = event.currentTarget.href;\n  }\n\n  if (state === 'loading') {\n    return <div>Loading...</div>;\n  }\n\n  if (!totalResults) {\n    return <NoPredictiveSearchResults searchTerm={searchTerm} />;\n  }\n\n  return (\n    <div className=\"predictive-search-results\">\n      <div>\n        {results.map(({type, items}) => (\n          <PredictiveSearchResult\n            goToSearchResult={goToSearchResult}\n            items={items}\n            key={type}\n            searchTerm={searchTerm}\n            type={type}\n          />\n        ))}\n      </div>\n      {searchTerm.current && (\n        <Link onClick={goToSearchResult} to={`/search?q=${searchTerm.current}`}>\n          <p>\n            View all results for <q>{searchTerm.current}</q>\n            &nbsp; \u2192\n          </p>\n        </Link>\n      )}\n    </div>\n  );\n}\n\nfunction NoPredictiveSearchResults({\n  searchTerm,\n}: {\n  searchTerm: React.MutableRefObject<string>;\n}) {\n  if (!searchTerm.current) {\n    return null;\n  }\n  return (\n    <p>\n      No results found for <q>{searchTerm.current}</q>\n    </p>\n  );\n}\n\ntype SearchResultTypeProps = {\n  goToSearchResult: (event: React.MouseEvent<HTMLAnchorElement>) => void;\n  items: NormalizedPredictiveSearchResultItem[];\n  searchTerm: UseSearchReturn['searchTerm'];\n  type: NormalizedPredictiveSearchResults[number]['type'];\n};\n\nfunction PredictiveSearchResult({\n  goToSearchResult,\n  items,\n  searchTerm,\n  type,\n}: SearchResultTypeProps) {\n  const isSuggestions = type === 'queries';\n  const categoryUrl = `/search?q=${\n    searchTerm.current\n  }&type=${pluralToSingularSearchType(type)}`;\n\n  return (\n    <div className=\"predictive-search-result\" key={type}>\n      <Link prefetch=\"intent\" to={categoryUrl} onClick={goToSearchResult}>\n        <h5>{isSuggestions ? 'Suggestions' : type}</h5>\n      </Link>\n      <ul>\n        {items.map((item: NormalizedPredictiveSearchResultItem) => (\n          <SearchResultItem\n            goToSearchResult={goToSearchResult}\n            item={item}\n            key={item.id}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\ntype SearchResultItemProps = Pick<SearchResultTypeProps, 'goToSearchResult'> & {\n  item: NormalizedPredictiveSearchResultItem;\n};\n\nfunction SearchResultItem({goToSearchResult, item}: SearchResultItemProps) {\n  return (\n    <li className=\"predictive-search-result-item\" key={item.id}>\n      <Link onClick={goToSearchResult} to={item.url}>\n        {item.image?.url && (\n          <Image\n            alt={item.image.altText ?? ''}\n            src={item.image.url}\n            width={50}\n            height={50}\n          />\n        )}\n        <div>\n          {item.styledTitle ? (\n            <div\n              dangerouslySetInnerHTML={{\n                __html: item.styledTitle,\n              }}\n            />\n          ) : (\n            <span>{item.title}</span>\n          )}\n          {item?.price && (\n            <small>\n              <Money data={item.price} />\n            </small>\n          )}\n        </div>\n      </Link>\n    </li>\n  );\n}\n\ntype UseSearchReturn = NormalizedPredictiveSearch & {\n  searchInputRef: React.MutableRefObject<HTMLInputElement | null>;\n  searchTerm: React.MutableRefObject<string>;\n  state: ReturnType<typeof useFetcher>['state'];\n};\n\nfunction usePredictiveSearch(): UseSearchReturn {\n  const searchFetcher = useFetcher<FetchSearchResultsReturn>({key: 'search'});\n  const searchTerm = useRef<string>('');\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n\n  if (searchFetcher?.state === 'loading') {\n    searchTerm.current = (searchFetcher.formData?.get('q') || '') as string;\n  }\n\n  const search = (searchFetcher?.data?.searchResults || {\n    results: NO_PREDICTIVE_SEARCH_RESULTS,\n    totalResults: 0,\n  }) as NormalizedPredictiveSearch;\n\n  // capture the search input element as a ref\n  useEffect(() => {\n    if (searchInputRef.current) return;\n    searchInputRef.current = document.querySelector('input[type=\"search\"]');\n  }, []);\n\n  return {...search, searchInputRef, searchTerm, state: searchFetcher.state};\n}\n\n/**\n * Converts a plural search type to a singular search type\n *\n * @example\n * ```js\n * pluralToSingularSearchType('articles'); // => 'ARTICLE'\n * pluralToSingularSearchType(['articles', 'products']); // => 'ARTICLE,PRODUCT'\n * ```\n */\nfunction pluralToSingularSearchType(\n  type:\n    | NormalizedPredictiveSearchResults[number]['type']\n    | Array<NormalizedPredictiveSearchResults[number]['type']>,\n) {\n  const plural = {\n    articles: 'ARTICLE',\n    collections: 'COLLECTION',\n    pages: 'PAGE',\n    products: 'PRODUCT',\n    queries: 'QUERY',\n  };\n\n  if (typeof type === 'string') {\n    return plural[type];\n  }\n\n  return type.map((t) => plural[t]).join(',');\n}\n", "import type {\n  PredictiveQueryFragment,\n  SearchProductFragment,\n  PredictiveProductFragment,\n  PredictiveCollectionFragment,\n  PredictivePageFragment,\n  PredictiveArticleFragment,\n} from 'storefrontapi.generated';\n\nexport function applyTrackingParams(\n  resource:\n    | PredictiveQueryFragment\n    | SearchProductFragment\n    | PredictiveProductFragment\n    | PredictiveCollectionFragment\n    | PredictiveArticleFragment\n    | PredictivePageFragment,\n  params?: string,\n) {\n  if (params) {\n    return resource?.trackingParameters\n      ? `?${params}&${resource.trackingParameters}`\n      : `?${params}`;\n  } else {\n    return resource?.trackingParameters\n      ? `?${resource.trackingParameters}`\n      : '';\n  }\n}\n"],
  "mappings": "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",
  "names": ["init_esm", "import_react", "applyTrackingParams", "resource", "params", "import_jsx_runtime", "NO_PREDICTIVE_SEARCH_RESULTS", "SearchForm", "searchTerm", "inputRef", "handleKeyDown", "event", "Form", "SearchResults", "results", "keys", "type", "resourceResults", "pageResults", "SearchResultPageGrid", "productResults", "SearchResultsProductsGrid", "articleResults", "SearchResultArticleGrid", "products", "Sr", "nodes", "isLoading", "NextLink", "PreviousLink", "ItemsMarkup", "product", "trackingParams", "applyTrackingParams", "Link", "Image", "Money", "pages", "page", "articles", "article", "NoSearchResults", "PredictiveSearchForm", "action", "children", "className", "props", "params", "useParams", "fetcher", "useFetcher", "fetchResults", "searchAction", "newSearchTerm", "localizedAction", "PredictiveSearchResults", "totalResults", "searchInputRef", "state", "usePredictiveSearch", "goToSearchResult", "items", "PredictiveSearchResult", "NoPredictiveSearchResults", "isSuggestions", "categoryUrl", "pluralToSingularSearchType", "item", "SearchResultItem", "searchFetcher", "search", "plural", "t"]
}
