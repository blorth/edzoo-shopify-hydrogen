{
  "version": 3,
  "sources": ["../../../../app/routes/account.addresses.tsx"],
  "sourcesContent": ["import type {CustomerAddressInput} from '@shopify/hydrogen/customer-account-api-types';\nimport type {\n  AddressFragment,\n  CustomerFragment,\n} from 'customer-accountapi.generated';\nimport {\n  json,\n  redirect,\n  type ActionFunctionArgs,\n  type LoaderFunctionArgs,\n} from '@shopify/remix-oxygen';\nimport {\n  Form,\n  useActionData,\n  useNavigation,\n  useOutletContext,\n  type MetaFunction,\n} from '@remix-run/react';\nimport {\n  UPDATE_ADDRESS_MUTATION,\n  DELETE_ADDRESS_MUTATION,\n  CREATE_ADDRESS_MUTATION,\n} from '~/graphql/customer-account/CustomerAddressMutations';\n\nexport type ActionResponse = {\n  addressId?: string | null;\n  createdAddress?: AddressFragment;\n  defaultAddress?: string | null;\n  deletedAddress?: string | null;\n  error: Record<AddressFragment['id'], string> | null;\n  updatedAddress?: AddressFragment;\n};\n\nexport const meta: MetaFunction = () => {\n  return [{title: 'Addresses'}];\n};\n\nexport async function loader({context}: LoaderFunctionArgs) {\n  await context.customerAccount.handleAuthStatus();\n\n  return json(\n    {},\n    {\n      headers: {\n        'Set-Cookie': await context.session.commit(),\n      },\n    },\n  );\n}\n\nexport async function action({request, context}: ActionFunctionArgs) {\n  const {customerAccount} = context;\n\n  try {\n    const form = await request.formData();\n\n    const addressId = form.has('addressId')\n      ? String(form.get('addressId'))\n      : null;\n    if (!addressId) {\n      throw new Error('You must provide an address id.');\n    }\n\n    // this will ensure redirecting to login never happen for mutatation\n    const isLoggedIn = await customerAccount.isLoggedIn();\n    if (!isLoggedIn) {\n      return json(\n        {error: {[addressId]: 'Unauthorized'}},\n        {\n          status: 401,\n          headers: {\n            'Set-Cookie': await context.session.commit(),\n          },\n        },\n      );\n    }\n\n    const defaultAddress = form.has('defaultAddress')\n      ? String(form.get('defaultAddress')) === 'on'\n      : false;\n    const address: CustomerAddressInput = {};\n    const keys: (keyof CustomerAddressInput)[] = [\n      'address1',\n      'address2',\n      'city',\n      'company',\n      'territoryCode',\n      'firstName',\n      'lastName',\n      'phoneNumber',\n      'zoneCode',\n      'zip',\n    ];\n\n    for (const key of keys) {\n      const value = form.get(key);\n      if (typeof value === 'string') {\n        address[key] = value;\n      }\n    }\n\n    switch (request.method) {\n      case 'POST': {\n        // handle new address creation\n        try {\n          const {data, errors} = await customerAccount.mutate(\n            CREATE_ADDRESS_MUTATION,\n            {\n              variables: {address, defaultAddress},\n            },\n          );\n\n          if (errors?.length) {\n            throw new Error(errors[0].message);\n          }\n\n          if (data?.customerAddressCreate?.userErrors?.length) {\n            throw new Error(data?.customerAddressCreate?.userErrors[0].message);\n          }\n\n          if (!data?.customerAddressCreate?.customerAddress) {\n            throw new Error('Customer address create failed.');\n          }\n\n          return json(\n            {\n              error: null,\n              createdAddress: data?.customerAddressCreate?.customerAddress,\n              defaultAddress,\n            },\n            {\n              headers: {\n                'Set-Cookie': await context.session.commit(),\n              },\n            },\n          );\n        } catch (error: unknown) {\n          if (error instanceof Error) {\n            return json(\n              {error: {[addressId]: error.message}},\n              {\n                status: 400,\n                headers: {\n                  'Set-Cookie': await context.session.commit(),\n                },\n              },\n            );\n          }\n          return json(\n            {error: {[addressId]: error}},\n            {\n              status: 400,\n              headers: {\n                'Set-Cookie': await context.session.commit(),\n              },\n            },\n          );\n        }\n      }\n\n      case 'PUT': {\n        // handle address updates\n        try {\n          const {data, errors} = await customerAccount.mutate(\n            UPDATE_ADDRESS_MUTATION,\n            {\n              variables: {\n                address,\n                addressId: decodeURIComponent(addressId),\n                defaultAddress,\n              },\n            },\n          );\n\n          if (errors?.length) {\n            throw new Error(errors[0].message);\n          }\n\n          if (data?.customerAddressUpdate?.userErrors?.length) {\n            throw new Error(data?.customerAddressUpdate?.userErrors[0].message);\n          }\n\n          if (!data?.customerAddressUpdate?.customerAddress) {\n            throw new Error('Customer address update failed.');\n          }\n\n          return json(\n            {\n              error: null,\n              updatedAddress: address,\n              defaultAddress,\n            },\n            {\n              headers: {\n                'Set-Cookie': await context.session.commit(),\n              },\n            },\n          );\n        } catch (error: unknown) {\n          if (error instanceof Error) {\n            return json(\n              {error: {[addressId]: error.message}},\n              {\n                status: 400,\n                headers: {\n                  'Set-Cookie': await context.session.commit(),\n                },\n              },\n            );\n          }\n          return json(\n            {error: {[addressId]: error}},\n            {\n              status: 400,\n              headers: {\n                'Set-Cookie': await context.session.commit(),\n              },\n            },\n          );\n        }\n      }\n\n      case 'DELETE': {\n        // handles address deletion\n        try {\n          const {data, errors} = await customerAccount.mutate(\n            DELETE_ADDRESS_MUTATION,\n            {\n              variables: {addressId: decodeURIComponent(addressId)},\n            },\n          );\n\n          if (errors?.length) {\n            throw new Error(errors[0].message);\n          }\n\n          if (data?.customerAddressDelete?.userErrors?.length) {\n            throw new Error(data?.customerAddressDelete?.userErrors[0].message);\n          }\n\n          if (!data?.customerAddressDelete?.deletedAddressId) {\n            throw new Error('Customer address delete failed.');\n          }\n\n          return json(\n            {error: null, deletedAddress: addressId},\n            {\n              headers: {\n                'Set-Cookie': await context.session.commit(),\n              },\n            },\n          );\n        } catch (error: unknown) {\n          if (error instanceof Error) {\n            return json(\n              {error: {[addressId]: error.message}},\n              {\n                status: 400,\n                headers: {\n                  'Set-Cookie': await context.session.commit(),\n                },\n              },\n            );\n          }\n          return json(\n            {error: {[addressId]: error}},\n            {\n              status: 400,\n              headers: {\n                'Set-Cookie': await context.session.commit(),\n              },\n            },\n          );\n        }\n      }\n\n      default: {\n        return json(\n          {error: {[addressId]: 'Method not allowed'}},\n          {\n            status: 405,\n            headers: {\n              'Set-Cookie': await context.session.commit(),\n            },\n          },\n        );\n      }\n    }\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      return json(\n        {error: error.message},\n        {\n          status: 400,\n          headers: {\n            'Set-Cookie': await context.session.commit(),\n          },\n        },\n      );\n    }\n    return json(\n      {error},\n      {\n        status: 400,\n        headers: {\n          'Set-Cookie': await context.session.commit(),\n        },\n      },\n    );\n  }\n}\n\nexport default function Addresses() {\n  const {customer} = useOutletContext<{customer: CustomerFragment}>();\n  const {defaultAddress, addresses} = customer;\n\n  return (\n    <div className=\"account-addresses\">\n      <h2>Addresses</h2>\n      <br />\n      {!addresses.nodes.length ? (\n        <p>You have no addresses saved.</p>\n      ) : (\n        <div>\n          <div>\n            <legend>Create address</legend>\n            <NewAddressForm />\n          </div>\n          <br />\n          <hr />\n          <br />\n          <ExistingAddresses\n            addresses={addresses}\n            defaultAddress={defaultAddress}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction NewAddressForm() {\n  const newAddress = {\n    address1: '',\n    address2: '',\n    city: '',\n    company: '',\n    territoryCode: '',\n    firstName: '',\n    id: 'new',\n    lastName: '',\n    phoneNumber: '',\n    zoneCode: '',\n    zip: '',\n  } as CustomerAddressInput;\n\n  return (\n    <AddressForm\n      addressId={'NEW_ADDRESS_ID'}\n      address={newAddress}\n      defaultAddress={null}\n    >\n      {({stateForMethod}) => (\n        <div>\n          <button\n            disabled={stateForMethod('POST') !== 'idle'}\n            formMethod=\"POST\"\n            type=\"submit\"\n          >\n            {stateForMethod('POST') !== 'idle' ? 'Creating' : 'Create'}\n          </button>\n        </div>\n      )}\n    </AddressForm>\n  );\n}\n\nfunction ExistingAddresses({\n  addresses,\n  defaultAddress,\n}: Pick<CustomerFragment, 'addresses' | 'defaultAddress'>) {\n  return (\n    <div>\n      <legend>Existing addresses</legend>\n      {addresses.nodes.map((address) => (\n        <AddressForm\n          key={address.id}\n          addressId={address.id}\n          address={address}\n          defaultAddress={defaultAddress}\n        >\n          {({stateForMethod}) => (\n            <div>\n              <button\n                disabled={stateForMethod('PUT') !== 'idle'}\n                formMethod=\"PUT\"\n                type=\"submit\"\n              >\n                {stateForMethod('PUT') !== 'idle' ? 'Saving' : 'Save'}\n              </button>\n              <button\n                disabled={stateForMethod('DELETE') !== 'idle'}\n                formMethod=\"DELETE\"\n                type=\"submit\"\n              >\n                {stateForMethod('DELETE') !== 'idle' ? 'Deleting' : 'Delete'}\n              </button>\n            </div>\n          )}\n        </AddressForm>\n      ))}\n    </div>\n  );\n}\n\nexport function AddressForm({\n  addressId,\n  address,\n  defaultAddress,\n  children,\n}: {\n  addressId: AddressFragment['id'];\n  address: CustomerAddressInput;\n  defaultAddress: CustomerFragment['defaultAddress'];\n  children: (props: {\n    stateForMethod: (\n      method: 'PUT' | 'POST' | 'DELETE',\n    ) => ReturnType<typeof useNavigation>['state'];\n  }) => React.ReactNode;\n}) {\n  const {state, formMethod} = useNavigation();\n  const action = useActionData<ActionResponse>();\n  const error = action?.error?.[addressId];\n  const isDefaultAddress = defaultAddress?.id === addressId;\n  return (\n    <Form id={addressId}>\n      <fieldset>\n        <input type=\"hidden\" name=\"addressId\" defaultValue={addressId} />\n        <label htmlFor=\"firstName\">First name*</label>\n        <input\n          aria-label=\"First name\"\n          autoComplete=\"given-name\"\n          defaultValue={address?.firstName ?? ''}\n          id=\"firstName\"\n          name=\"firstName\"\n          placeholder=\"First name\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"lastName\">Last name*</label>\n        <input\n          aria-label=\"Last name\"\n          autoComplete=\"family-name\"\n          defaultValue={address?.lastName ?? ''}\n          id=\"lastName\"\n          name=\"lastName\"\n          placeholder=\"Last name\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"company\">Company</label>\n        <input\n          aria-label=\"Company\"\n          autoComplete=\"organization\"\n          defaultValue={address?.company ?? ''}\n          id=\"company\"\n          name=\"company\"\n          placeholder=\"Company\"\n          type=\"text\"\n        />\n        <label htmlFor=\"address1\">Address line*</label>\n        <input\n          aria-label=\"Address line 1\"\n          autoComplete=\"address-line1\"\n          defaultValue={address?.address1 ?? ''}\n          id=\"address1\"\n          name=\"address1\"\n          placeholder=\"Address line 1*\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"address2\">Address line 2</label>\n        <input\n          aria-label=\"Address line 2\"\n          autoComplete=\"address-line2\"\n          defaultValue={address?.address2 ?? ''}\n          id=\"address2\"\n          name=\"address2\"\n          placeholder=\"Address line 2\"\n          type=\"text\"\n        />\n        <label htmlFor=\"city\">City*</label>\n        <input\n          aria-label=\"City\"\n          autoComplete=\"address-level2\"\n          defaultValue={address?.city ?? ''}\n          id=\"city\"\n          name=\"city\"\n          placeholder=\"City\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"zoneCode\">State / Province*</label>\n        <input\n          aria-label=\"State/Province\"\n          autoComplete=\"address-level1\"\n          defaultValue={address?.zoneCode ?? ''}\n          id=\"zoneCode\"\n          name=\"zoneCode\"\n          placeholder=\"State / Province\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"zip\">Zip / Postal Code*</label>\n        <input\n          aria-label=\"Zip\"\n          autoComplete=\"postal-code\"\n          defaultValue={address?.zip ?? ''}\n          id=\"zip\"\n          name=\"zip\"\n          placeholder=\"Zip / Postal Code\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"territoryCode\">Country Code*</label>\n        <input\n          aria-label=\"territoryCode\"\n          autoComplete=\"country\"\n          defaultValue={address?.territoryCode ?? ''}\n          id=\"territoryCode\"\n          name=\"territoryCode\"\n          placeholder=\"Country\"\n          required\n          type=\"text\"\n          maxLength={2}\n        />\n        <label htmlFor=\"phoneNumber\">Phone</label>\n        <input\n          aria-label=\"Phone Number\"\n          autoComplete=\"tel\"\n          defaultValue={address?.phoneNumber ?? ''}\n          id=\"phoneNumber\"\n          name=\"phoneNumber\"\n          placeholder=\"+16135551111\"\n          pattern=\"^\\+?[1-9]\\d{3,14}$\"\n          type=\"tel\"\n        />\n        <div>\n          <input\n            defaultChecked={isDefaultAddress}\n            id=\"defaultAddress\"\n            name=\"defaultAddress\"\n            type=\"checkbox\"\n          />\n          <label htmlFor=\"defaultAddress\">Set as default address</label>\n        </div>\n        {error ? (\n          <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        {children({\n          stateForMethod: (method) => (formMethod === method ? state : 'idle'),\n        })}\n      </fieldset>\n    </Form>\n  );\n}\n"],
  "mappings": "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",
  "names": ["init_esm", "import_jsx_runtime", "meta", "Addresses", "customer", "useOutletContext", "defaultAddress", "addresses", "NewAddressForm", "ExistingAddresses", "AddressForm", "stateForMethod", "address", "addressId", "children", "state", "formMethod", "useNavigation", "error", "useActionData", "isDefaultAddress", "Form", "method"]
}
