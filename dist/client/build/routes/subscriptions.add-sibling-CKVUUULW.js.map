{
  "version": 3,
  "sources": ["../../../../app/routes/subscriptions.add-sibling.tsx"],
  "sourcesContent": ["import {\n  defer,\n  SerializeFrom,\n  type LoaderFunctionArgs,\n} from '@shopify/remix-oxygen';\nimport React, {useEffect, useState} from 'react';\nimport {\n  useLoaderData,\n  useMatches,\n  useParams,\n  useSearchParams,\n} from '@remix-run/react';\nimport {COLLECTION_FRAGMENT} from '~/lib/fragmentsSubscriptions';\nimport ProductCard, {\n  CardModeEnum,\n  QuantityActionsEnum,\n} from '~/components/ProductCard';\n\ntype SubscriptionsCohertProps = {};\n\n/**\n * Access the result of the root loader from a React component.\n */\nexport const useRootLoaderData = () => {\n  const [root] = useMatches();\n  return root?.data as SerializeFrom<typeof loader>;\n};\n\nexport async function loader({params, context, request}: LoaderFunctionArgs) {\n  const data = await context.storefront.query(COLLECTION_QUERY);\n  const {cart} = context;\n  const cartPromise = cart.get();\n\n  return defer({\n    cart: cartPromise,\n    collections: {...data},\n  });\n}\n\nconst SubscriptionsCohert: React.FC<SubscriptionsCohertProps> = ({}) => {\n  const {collections, cart} = useLoaderData<typeof loader>();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const params = useParams();\n  const [siblingSelections, setSiblingSelections] = useState<any>([]);\n  const [selectedProduct, setSelectedProduct] = useState<any>();\n  const [selectedAccessories, setSelectedAccessories] = useState<any>([]);\n\n  console.log({collections});\n\n  useEffect(() => {\n    /**\n     * On load, get the three collections\n     * Get the matching age group that matches the passed in ID and cohort.\n     */\n    const selectedCohort = searchParams.get('cohort');\n    if (selectedCohort && typeof selectedCohort === 'string' && collections) {\n      const selectedCollection = collections[selectedCohort];\n      const matchingProduct = selectedCollection.products.edges.find(\n        (product: any) => {\n          return product.node.id.includes(searchParams.get('id'));\n        },\n      );\n\n      setSelectedProduct(matchingProduct.node);\n\n      // Find the matching purchase type in the other collections\n      // Don't return the matching product that's on the same cohort\n      const products = [];\n      for (const [key, value] of Object.entries(collections)) {\n        const matched = value.products.edges.find((product: any) => {\n          console.log({product});\n          const cohort = product.node.metaFieldCohort.value;\n          const selectedCohort = matchingProduct.node.metaFieldCohort.value;\n\n          const hasSamePurchaseTypeTag =\n            product.node.metaFieldPurchaseTypeTag.value ===\n            matchingProduct.node.metaFieldPurchaseTypeTag.value;\n\n          return cohort !== selectedCohort && hasSamePurchaseTypeTag;\n        });\n\n        if (matched) products.push(matched);\n      }\n\n      setSiblingSelections(products);\n\n      // TODO: Need to find the matching accessories in the collections object.\n      // We need to find the matching accessories that are in the same metaFieldPurchaseTypeTag as the selected product\n      // ie if the selected product is a monthly subscription, find the monthly accessories collection.\n    }\n  }, [collections]);\n\n  const handleOnSelect = (\n    product: any,\n    quantityAction?: QuantityActionsEnum,\n  ) => {\n    // Find the product in the cart and increment or decrement the size based on quantityAction\n    // If the new quantity goes down to zero,\n\n    if (quantityAction === QuantityActionsEnum.ADD) {\n      // TODO: If ADD, add item to cart\n    } else if (quantityAction === QuantityActionsEnum.MINUS) {\n      // If MINUS, decrease quantity\n    }\n  };\n\n  return (\n    <div className=\"SubscriptionsCohortWithSelectedId bg-browns-tan-light p-9\">\n      <div className=\"heading-group\">\n        <h2 className=\"mb-2\">Want to Add a Sibling?</h2>\n        <p>Add another subscription box or one-time accessories.</p>\n      </div>\n      <div className=\"mt-4\">\n        <h4>Subscriptions</h4>\n        <div className=\"flex gap-2 flex-wrap\">\n          {selectedProduct && (\n            <ProductCard\n              product={selectedProduct}\n              key={selectedProduct.id}\n              isSelected={selectedProduct.id.includes(searchParams.get('id'))}\n              cardMode={CardModeEnum.QUANTITY}\n              // quantity={productInCart.quantity}\n              onSelect={handleOnSelect}\n            />\n          )}\n\n          {siblingSelections.map((product: any) => {\n            const {node} = product;\n            return (\n              <ProductCard\n                product={node}\n                key={node.id}\n                isSelected={node.id === searchParams.get('id')}\n                cardMode={CardModeEnum.QUANTITY}\n                // quantity={productInCart.quantity}\n                onSelect={handleOnSelect}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionsCohert;\n\nexport const COLLECTION_QUERY = `#graphql\n  query {\n    zoologist: collection(id: \"gid://shopify/Collection/293547016364\") {\n      ...Subscriptions\n    }\n    zookeeper: collection(id: \"gid://shopify/Collection/293479645356\") {\n      ...Subscriptions\n    }\n    conservationist: collection(id: \"gid://shopify/Collection/293966839980\") {\n      ...Subscriptions\n    }\n    add_on_subscriptions_ages_3_5: collectionByHandle(handle: \"add-on-subscriptions-ages-3-5\") {\n      ...Subscriptions\n    }\n    add_on_subscriptions_ages_6_8: collectionByHandle(handle: \"add-on-subscriptions-ages-6-8\") {\n      ...Subscriptions\n    }\n    add_on_subscriptions_ages_9_12: collectionByHandle(handle: \"add-on-subscriptions-ages-9-12\") {\n      ...Subscriptions\n    }\n  }\n  ${COLLECTION_FRAGMENT}\n` as const;\n"],
  "mappings": "88BAKA,IAAAA,EAAyC,OACzCC,IAsGM,IAAAC,EAAA,OArEN,IAAMC,EAA0D,CAAC,CAAC,IAAM,CACtE,GAAM,CAAC,YAAAC,EAAa,KAAAC,CAAI,EAAIC,EAA6B,EACnD,CAACC,EAAcC,CAAe,EAAIC,EAAgB,EAClDC,EAASC,EAAU,EACnB,CAACC,EAAmBC,CAAoB,KAAI,YAAc,CAAC,CAAC,EAC5D,CAACC,EAAiBC,CAAkB,KAAI,YAAc,EACtD,CAACC,EAAqBC,CAAsB,KAAI,YAAc,CAAC,CAAC,EAEtE,QAAQ,IAAI,CAAC,YAAAb,CAAW,CAAC,KAEzB,aAAU,IAAM,CAKd,IAAMc,EAAiBX,EAAa,IAAI,QAAQ,EAChD,GAAIW,GAAkB,OAAOA,GAAmB,UAAYd,EAAa,CAEvE,IAAMe,EADqBf,EAAYc,CAAc,EACV,SAAS,MAAM,KACvDE,GACQA,EAAQ,KAAK,GAAG,SAASb,EAAa,IAAI,IAAI,CAAC,CAE1D,EAEAQ,EAAmBI,EAAgB,IAAI,EAIvC,IAAME,EAAW,CAAC,EAClB,OAAW,CAACC,EAAKC,CAAK,IAAK,OAAO,QAAQnB,CAAW,EAAG,CACtD,IAAMoB,EAAUD,EAAM,SAAS,MAAM,KAAMH,GAAiB,CAC1D,QAAQ,IAAI,CAAC,QAAAA,CAAO,CAAC,EACrB,IAAMK,EAASL,EAAQ,KAAK,gBAAgB,MACtCF,EAAiBC,EAAgB,KAAK,gBAAgB,MAEtDO,EACJN,EAAQ,KAAK,yBAAyB,QACtCD,EAAgB,KAAK,yBAAyB,MAEhD,OAAOM,IAAWP,GAAkBQ,CACtC,CAAC,EAEGF,GAASH,EAAS,KAAKG,CAAO,EAGpCX,EAAqBQ,CAAQ,EAMjC,EAAG,CAACjB,CAAW,CAAC,EAEhB,IAAMuB,EAAiB,CACrBP,EACAQ,IACG,CAICA,kBAKN,EAEA,SACE,QAAC,OAAI,UAAU,4DACb,qBAAC,OAAI,UAAU,gBACb,oBAAC,MAAG,UAAU,OAAO,kCAAsB,KAC3C,OAAC,KAAE,iEAAqD,GAC1D,KACA,QAAC,OAAI,UAAU,OACb,oBAAC,MAAG,yBAAa,KACjB,QAAC,OAAI,UAAU,uBACZ,UAAAd,MACC,OAACe,EAAA,CACC,QAASf,EAET,WAAYA,EAAgB,GAAG,SAASP,EAAa,IAAI,IAAI,CAAC,EAC9D,oBAEA,SAAUoB,GAJLb,EAAgB,EAKvB,EAGDF,EAAkB,IAAKQ,GAAiB,CACvC,GAAM,CAAC,KAAAU,CAAI,EAAIV,EACf,SACE,OAACS,EAAA,CACC,QAASC,EAET,WAAYA,EAAK,KAAOvB,EAAa,IAAI,IAAI,EAC7C,oBAEA,SAAUoB,GAJLG,EAAK,EAKZ,CAEJ,CAAC,GACH,GACF,GACF,CAEJ,EAEOC,EAAQ5B,EAEF6B,EAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqB5BC;",
  "names": ["import_react", "init_esm", "import_jsx_runtime", "SubscriptionsCohert", "collections", "cart", "useLoaderData", "searchParams", "setSearchParams", "useSearchParams", "params", "useParams", "siblingSelections", "setSiblingSelections", "selectedProduct", "setSelectedProduct", "selectedAccessories", "setSelectedAccessories", "selectedCohort", "matchingProduct", "product", "products", "key", "value", "matched", "cohort", "hasSamePurchaseTypeTag", "handleOnSelect", "quantityAction", "ProductCard_default", "node", "subscriptions_add_sibling_default", "COLLECTION_QUERY", "COLLECTION_FRAGMENT"]
}
