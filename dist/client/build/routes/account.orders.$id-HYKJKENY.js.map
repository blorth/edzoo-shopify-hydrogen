{
  "version": 3,
  "sources": ["../../../../app/routes/account.orders.$id.tsx"],
  "sourcesContent": ["import {json, redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';\nimport {Link, useLoaderData, type MetaFunction} from '@remix-run/react';\nimport {Money, Image, flattenConnection} from '@shopify/hydrogen';\nimport type {OrderLineItemFullFragment} from 'customer-accountapi.generated';\nimport {CUSTOMER_ORDER_QUERY} from '~/graphql/customer-account/CustomerOrderQuery';\n\nexport const meta: MetaFunction<typeof loader> = ({data}) => {\n  return [{title: `Order ${data?.order?.name}`}];\n};\n\nexport async function loader({params, context, request}: LoaderFunctionArgs) {\n  if (!params.id) {\n    return redirect('/account/orders');\n  }\n\n  const orderId = atob(params.id);\n  const {data, errors} = await context.customerAccount.query(\n    CUSTOMER_ORDER_QUERY,\n    {\n      variables: {orderId},\n    },\n  );\n\n  if (errors?.length || !data?.order) {\n    throw new Error('Order not found');\n  }\n\n  const {order} = data;\n\n  const lineItems = flattenConnection(order.lineItems);\n  const discountApplications = flattenConnection(order.discountApplications);\n  const fulfillmentStatus = flattenConnection(order.fulfillments)[0].status;\n\n  const firstDiscount = discountApplications[0]?.value;\n\n  const discountValue =\n    firstDiscount?.__typename === 'MoneyV2' && firstDiscount;\n\n  const discountPercentage =\n    firstDiscount?.__typename === 'PricingPercentageValue' &&\n    firstDiscount?.percentage;\n\n  return json(\n    {\n      order,\n      lineItems,\n      discountValue,\n      discountPercentage,\n      fulfillmentStatus,\n    },\n    {\n      headers: {\n        'Set-Cookie': await context.session.commit(),\n      },\n    },\n  );\n}\n\nexport default function OrderRoute() {\n  const {\n    order,\n    lineItems,\n    discountValue,\n    discountPercentage,\n    fulfillmentStatus,\n  } = useLoaderData<typeof loader>();\n  return (\n    <div className=\"account-order\">\n      <h2>Order {order.name}</h2>\n      <p>Placed on {new Date(order.processedAt!).toDateString()}</p>\n      <br />\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Product</th>\n              <th scope=\"col\">Price</th>\n              <th scope=\"col\">Quantity</th>\n              <th scope=\"col\">Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            {lineItems.map((lineItem, lineItemIndex) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <OrderLineRow key={lineItemIndex} lineItem={lineItem} />\n            ))}\n          </tbody>\n          <tfoot>\n            {((discountValue && discountValue.amount) ||\n              discountPercentage) && (\n              <tr>\n                <th scope=\"row\" colSpan={3}>\n                  <p>Discounts</p>\n                </th>\n                <th scope=\"row\">\n                  <p>Discounts</p>\n                </th>\n                <td>\n                  {discountPercentage ? (\n                    <span>-{discountPercentage}% OFF</span>\n                  ) : (\n                    discountValue && <Money data={discountValue!} />\n                  )}\n                </td>\n              </tr>\n            )}\n            <tr>\n              <th scope=\"row\" colSpan={3}>\n                <p>Subtotal</p>\n              </th>\n              <th scope=\"row\">\n                <p>Subtotal</p>\n              </th>\n              <td>\n                <Money data={order.subtotal!} />\n              </td>\n            </tr>\n            <tr>\n              <th scope=\"row\" colSpan={3}>\n                Tax\n              </th>\n              <th scope=\"row\">\n                <p>Tax</p>\n              </th>\n              <td>\n                <Money data={order.totalTax!} />\n              </td>\n            </tr>\n            <tr>\n              <th scope=\"row\" colSpan={3}>\n                Total\n              </th>\n              <th scope=\"row\">\n                <p>Total</p>\n              </th>\n              <td>\n                <Money data={order.totalPrice!} />\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n        <div>\n          <h3>Shipping Address</h3>\n          {order?.shippingAddress ? (\n            <address>\n              <p>{order.shippingAddress.name}</p>\n              {order.shippingAddress.formatted ? (\n                <p>{order.shippingAddress.formatted}</p>\n              ) : (\n                ''\n              )}\n              {order.shippingAddress.formattedArea ? (\n                <p>{order.shippingAddress.formattedArea}</p>\n              ) : (\n                ''\n              )}\n            </address>\n          ) : (\n            <p>No shipping address defined</p>\n          )}\n          <h3>Status</h3>\n          <div>\n            <p>{fulfillmentStatus}</p>\n          </div>\n        </div>\n      </div>\n      <br />\n      <p>\n        <a target=\"_blank\" href={order.statusPageUrl} rel=\"noreferrer\">\n          View Order Status \u2192\n        </a>\n      </p>\n    </div>\n  );\n}\n\nfunction OrderLineRow({lineItem}: {lineItem: OrderLineItemFullFragment}) {\n  return (\n    <tr key={lineItem.id}>\n      <td>\n        <div>\n          {lineItem?.image && (\n            <div>\n              <Image data={lineItem.image} width={96} height={96} />\n            </div>\n          )}\n          <div>\n            <p>{lineItem.title}</p>\n            <small>{lineItem.variantTitle}</small>\n          </div>\n        </div>\n      </td>\n      <td>\n        <Money data={lineItem.price!} />\n      </td>\n      <td>{lineItem.quantity}</td>\n      <td>\n        <Money data={lineItem.totalDiscount!} />\n      </td>\n    </tr>\n  );\n}\n"],
  "mappings": "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",
  "names": ["init_esm", "import_jsx_runtime", "meta", "data", "OrderRoute", "order", "lineItems", "discountValue", "discountPercentage", "fulfillmentStatus", "useLoaderData", "lineItem", "lineItemIndex", "OrderLineRow", "Money", "Image"]
}
